# Custom U-Boot base environment for Nerves

# This environment is a majorly trimmed down version of the default
# one that ships with the Beaglebone.
#
# Why?
#   1. We want to store settings in the U-boot environment so that they're
#      accessible both to Elixir and U-boot.
#   2. This makes us add an environment block.
#   3. Unfortunately, if we point U-Boot to this block, it replaces its
#      default environment settings which contain all of the logic to
#      boot the boards. Therefore we have to copy/paste the relevant
#      parts here.
#   4. We can support more complicated firmware validation methods by
#      deferring validation of new software to the application. The
#      default below is to automatically validate new software.
#
# See U-Boot/include/configs/ti_armv7_common.h and
# U-Boot/include/configs/am335x_evm.h for most of what's below.

#
# Nerves variables
#

nerves_fw_active=a

# nerves_fw_autovalidate controls whether updates are considered valid once
# applied. If set to 0, the user needs to set nerves_fw_validated to 1 in their
# application. If they don't set it before a reboot, then the previous software
# is run. If 1, then no further action needs to be taken.
nerves_fw_autovalidate=1

# nerves_fw_validated is 1 if the current boot selection is accepted It is set
# to 1 here, since this environment is written in the factory, so it is
# implicitly valid.
nerves_fw_validated=1

# nerves_fw_booted is 0 for the first boot and 1 for all reboots after that.
# NOTE: Keep this '0' so that all new boards run a 'saveenv' to exercise the
#       code that writes back to the eMMC early on.
nerves_fw_booted=0

# The nerves initialization logic
#
# The nerves_init code is run at boot (see the last line of the file). It
# checks whether this is a first boot or not. If it's not the first boot, then
# the firmware better be validated or it reverts to running the firmware on
# the opposite partition.
nerves_revert=\
    if test ${nerves_fw_active} = "a"; then\
        echo "Reverting to partition B";\
        setenv nerves_fw_active "b";\
    else\
        echo "Reverting to partition A";\
        setenv nerves_fw_active "a";\
    fi

nerves_init=\
    if test ${nerves_fw_booted} = 1; then\
        if test ${nerves_fw_validated} = 0; then\
            run nerves_revert;\
            setenv nerves_fw_validated 1;\
            saveenv;\
        fi;\
    else\
        setenv nerves_fw_booted 1;\
        if test ${nerves_fw_autovalidate} = 1; then\
            setenv nerves_fw_validated 1;\
        fi;\
        saveenv;\
    fi;\
    setenv bootfile zImage.${nerves_fw_active};\
    if test ${nerves_fw_active} = "a"; then\
        setenv uenv_root /dev/mmcblk0p2;\
        setenv bootpart 0:2;\
    else\
        setenv uenv_root /dev/mmcblk0p3;\
        setenv bootpart 0:3;\
    fi

#
# Beagleboard variables with Nerves updates
#

#
# Default Linux commandline:
#
# coherent_pool=1M          - copied from Beaglebone defaults. It's needed for some WiFi drivers.
# net.ifnames=0             - copied from Beaglebone defaults
# omap_wdt.early_enable=1   - turn on the internal watchdog timer asap
# omap_wdt.timer_margin=120 - Erlang heart has 120 seconds to start petting the timer
# quiet                     - limit kernel prints to the console
cmdline=coherent_pool=1M quiet

# Defaults
console=ttyS0,115200
bootdir=
fdtdir=/boot
fdtfile=sun8i-h2-plus-orangepi-zero.dtb
devtype=mmc
# squashfs support is slow, so always load the kernel from FAT (FIXME)
kernel_bootpart=0:1

# Allocate memory for calls to dma_alloc_coherent. USB WiFi adapters
# use this.
# optargs=coherent_pool=1M

verbosit="1"
disp_mem_reserve="off"
rootfstyp="squashfs"

# Memory offset for loading files
loadaddr=0x44000000
load_addr=0x44000000
# fatload mmc 0 0x43000000 script.bin 
# fatload mmc 0 0x48000000 uImage 
# bootm 0x48000000


# Helper functions
args_uenv_root=setenv bootargs console=${console} ${optargs} root=${uenv_root} rootfstype=squashfs rootwait ${cmdline}

loadimage=load ${devtype} ${kernel_bootpart} ${loadaddr} ${bootdir}/${bootfile}
loadfdt=echo loading ${fdtdir}/${fdtfile} ...; load ${devtype} ${bootpart} ${fdt_addr_r} ${fdtdir}/${fdtfile}

uname_boot=if test -e ${devtype} ${kernel_bootpart} ${bootdir}/${bootfile}; then\
		echo loading ${bootdir}/${bootfile} ...;\
		run loadimage;\
    run loadfdt;\
		run args_uenv_root;\
		echo debug: [${bootargs}] ... ;\
		echo debug: [bootz ${loadaddr} - ${fdt_addr_r}] ... ;\
		bootz ${loadaddr} - ${fdt_addr_r};\
	fi

# Boot
bootcmd=run nerves_init uname_boot
